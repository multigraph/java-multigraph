#! /usr/bin/perl

### This version of this script generates a single java file (currently
### with the unforunate name "org.multigraph.Mugl.java") that uses nested
### (inner) classes instead of the Java package heirarchy to reflect
### heirarchy of the the MUGL XML schema.
###
### The project does not use this version yet, but I think I should switch
### to it.
###
### mbp Tue Feb 22 19:41:43 2011

use Data::Dumper;

$classes = [];

makebean({
    'class' => "org.multigraph.Mugl",
    'tag' => "mugl",
    'subelements' => [
        { 'tag' => 'graph',           'type' => "org.multigraph.Mugl.Graph",  'name' => 'graphs',  'array' => 1 },
        ]
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph",
    'tag'         => "graph",
    'parentclass' => "org.multigraph.Mugl",
    'attributes' => [
        { 'name' => "x",         "type" => "int",   'nullallowed' => 1 },
        { 'name' => "y",         "type" => "int",   'nullallowed' => 1 },
        { 'name' => "width",     "type" => "int",   'nullallowed' => 1 },
        { 'name' => "height",    "type" => "int",   'nullallowed' => 1 },
        ],
    'subelements' => [
        { 'tag' => 'background',      'type' => "org.multigraph.Mugl.Graph.Background" },
        { 'tag' => 'debug',           'type' => "org.multigraph.Mugl.Graph.Debug"      },
        { 'tag' => 'window',          'type' => "org.multigraph.Mugl.Graph.Window"     },
        { 'tag' => 'legend',          'type' => "org.multigraph.Mugl.Graph.Legend"     },
        { 'tag' => 'title',           'type' => "org.multigraph.Mugl.Graph.Title"      },
        { 'tag' => 'plotarea',        'type' => "org.multigraph.Mugl.Graph.Plotarea"   },
        { 'tag' => 'horizontalaxis',  'type' => "org.multigraph.Mugl.Graph.Axis",  'defaultstag' => 'axis',
          'name' => 'haxes',   'array' => 1, 'parseargs' => "org.multigraph.Mugl.Graph.Axis.Orientation.Horizontal" },
        { 'tag' => 'verticalaxis',    'type' => "org.multigraph.Mugl.Graph.Axis",  'defaultstag' => 'axis',
          'name' => 'vaxes',   'array' => 1, 'parseargs' => "org.multigraph.Mugl.Graph.Axis.Orientation.Vertical"   },
        { 'tag' => 'plot',            'type' => "org.multigraph.Mugl.Graph.Plot",  'name' => 'plots',   'array' => 1 },
        { 'tag' => 'data',            'type' => "org.multigraph.Mugl.Graph.Data",  'name' => 'datas',   'array' => 1 },
        ]
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Debug",
    'tag'         => "debug",
    'parentclass' => "org.multigraph.Mugl.Graph",
    'attributes' => [
        { 'name' => "xcolor",     "type" => "RGBColor" },
        { 'name' => "xwidth",     "type" => "double"   }
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Background",
    'tag'         => "background",
    'parentclass' => "org.multigraph.Mugl.Graph",
    'attributes' => [
        { 'name' => "color",     "type" => "RGBColor" },
        ],
    'subelements' => [
        {'tag' => 'img',          'type' => "org.multigraph.Mugl.Graph.Background.Img" },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Background.Img",
    'tag'         => "img",
    'parentclass' => "org.multigraph.Mugl.Graph.Background",
    'attributes' => [
        { 'name' => 'frame',           'type' => 'String' },
        { 'name' => 'anchor',          'type' => 'DPoint' },
        { 'name' => 'base',            'type' => 'DPoint' },
        { 'name' => 'position',        'type' => 'DPoint' },
        { 'name' => 'src',             'type' => 'String' }
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Window",
    'tag'         => "window",
    'parentclass' => "org.multigraph.Mugl.Graph",
    'attributes' => [
        { 'name' => "margin",    "type" => "int" },
        { 'name' => "border",    "type" => "int" },
        { 'name' => "bordercolor",  "type" => "RGBColor" },
        { 'name' => "padding",   "type" => "int" },
        { 'name' => "width",     "type" => "int",   'nullallowed' => 1 },
        { 'name' => "height",    "type" => "int",   'nullallowed' => 1 },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Legend",
    'tag'         => "legend",
    'parentclass' => "org.multigraph.Mugl.Graph",
    'attributes' => [
        { 'name' => 'visible',       'type' => 'String'      },
        { 'name' => 'frame',         'type' => 'String'      },
        { 'name' => 'base',          'type' => 'DPoint'      },
        { 'name' => 'anchor',        'type' => 'DPoint'      },
        { 'name' => 'position',      'type' => 'DPoint'      },
        { 'name' => 'columns',       'type' => 'int'         },
        { 'name' => 'rows',          'type' => 'int'         },
        { 'name' => 'border',        'type' => 'int'         },
        { 'name' => 'round',         'type' => 'boolean'     },
        { 'name' => 'radius',        'type' => 'int'         },
        { 'name' => 'color',         'type' => 'RGBColor'    },
        { 'name' => 'bordercolor',   'type' => 'RGBColor'    },
        { 'name' => 'opacity',       'type' => 'double'      },
        { 'name' => 'padding',       'type' => 'int'         },
        ],
    'subelements' => [
        { 'tag' => 'icon',          'type' => "org.multigraph.Mugl.Graph.Legend.Icon"    },
        ]
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Legend.Icon",
    'tag'         => "icon",
    'parentclass' => "org.multigraph.Mugl.Graph.Legend",
    'attributes' => [
        { 'name' => 'border',         'type' =>  'int'      },
        { 'name' => 'width',          'type' =>  'int'      },
        { 'name' => 'height',         'type' =>  'int'      }
        ],
         });


makebean({
    'class'       => "org.multigraph.Mugl.Graph.Title",
    'tag'         => "title",
    'parentclass' => "org.multigraph.Mugl.Graph",
    'attributes' => [
        { 'name' => 'frame',           'type' => 'String'      },
        { 'name' => 'base',            'type' => 'DPoint'      },
        { 'name' => 'anchor',          'type' => 'DPoint'      },
        { 'name' => 'position',        'type' => 'DPoint'      },
        { 'name' => 'border',          'type' => 'int'         },
        { 'name' => 'color',           'type' => 'RGBColor'    },
        { 'name' => 'bordercolor',     'type' => 'RGBColor'    },
        { 'name' => 'opacity',         'type' => 'double'      },
        { 'name' => 'round',           'type' => 'boolean'     },
        { 'name' => 'radius',          'type' => 'int'         },
        { 'name' => 'padding',         'type' => 'int'         },         
        { 'name' => 'fontsize',        'type' => 'int'         },    
        ],
        'textname'    => 'text',
         });


makebean({
    'class'       => "org.multigraph.Mugl.Graph.Plotarea",
    'tag'         => "plotarea",
    'parentclass' => "org.multigraph.Mugl.Graph",
    'attributes' => [
        { 'name' => 'border',         'type' =>  'int'      },
        { 'name' => 'bordercolor',    'type' =>  'RGBColor' },
        { 'name' => 'marginbottom',   'type' =>  'int'      },
        { 'name' => 'marginleft',     'type' =>  'int'      },
        { 'name' => 'margintop',      'type' =>  'int'      },
        { 'name' => 'marginright',    'type' =>  'int'      },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Axis",
    'tag'         => 'axis',
    'parentclass' => "org.multigraph.Mugl.Graph",
    'preamble' => <<EOF
    public static enum Orientation { HORIZONTAL, VERTICAL };

    public static String OrientationToString(Orientation orientation) {
        if (orientation == org.multigraph.mugl.graph.Axis.Orientation.HORIZONTAL) { return "horizontalaxis"; }
        if (orientation == org.multigraph.mugl.graph.Axis.Orientation.VERTICAL)   { return "verticalaxis"; }
        return null;
    }

    private Orientation orientation;
    public Orientation getOrientation() {
        return orientation;
    }
    public void setOrientation(Orientation orientation) {
        this.orientation = orientation;
    }
EOF
    ,

    'parseargs' => "Orientation orientation",

    'initsteps' => "axis.setOrientation(orientation);",

    'tagexpr'   => "OrientationToString(orientation)",

    'attributes' => [
        { 'name' => 'type',           'type' => 'DataValue.Type' },
        { 'name' => 'min',            'type' => 'String'         },
        { 'name' => 'max',            'type' => 'String'         },
        { 'name' => 'tickmin',        'type' => 'int'            },
        { 'name' => 'tickmax',        'type' => 'int'            },
        { 'name' => 'highlightstyle', 'type' => 'String'         },
        { 'name' => 'linewidth',      'type' => 'int'            },
        { 'name' => 'id',             'type' => 'String'         },
        { 'name' => 'position',       'type' => 'int'            },
        { 'name' => 'positionbase',   'type' => 'String'         },
        { 'name' => 'base',           'type' => 'DPoint'         },
        { 'name' => 'anchor',         'type' => 'double'         },
        { 'name' => 'length',         'type' => 'double'         },
        { 'name' => 'color',          'type' => 'RGBColor'       },
        { 'name' => 'pregap',         'type' => 'int'            },
        { 'name' => 'postgap',        'type' => 'int'            },
        { 'name' => 'minposition',    'type' => 'double'         },
        { 'name' => 'maxposition',    'type' => 'double'         }                                                                           ,
    ],
    
    'subelements' => [
        { 'tag' => 'title',           'type' => "org.multigraph.Mugl.Graph.Axis.Title",
          'defaultmods' => sub { my $subel = shift; my $inst = shift; return qq/${subel}.setText( ${inst}.getId() );/; } },
        { 'tag' => 'zoom',            'type' => "org.multigraph.Mugl.Graph.Axis.Zoom"          },
        { 'tag' => 'pan',             'type' => "org.multigraph.Mugl.Graph.Axis.Pan"           },
        { 'tag' => 'grid',            'type' => "org.multigraph.Mugl.Graph.Axis.Grid"          },
        { 'tag' => 'labels',          'type' => "org.multigraph.Mugl.Graph.Axis.Labels"        },
    ],
         });


makebean({
    'class'       => "org.multigraph.Mugl.Graph.Axis.Title",
    'tag'         => "title",
    'parentclass' => "org.multigraph.Mugl.Graph.Axis",
    'attributes' => [
        { 'name' => 'fontname',      "type" => 'String'   },
        { 'name' => 'fontsize',      "type" => 'int'      },
        { 'name' => 'fontcolor',     "type" => 'RGBColor' },
        { 'name' => 'angle',         "type" => 'double'   },
        { 'name' => 'position',      "type" => 'DPoint'   },
        { 'name' => 'anchor',        "type" => 'DPoint'   },
        ],
        'textname'    => 'text',
         });

makebean({
    'class' => "org.multigraph.Mugl.Graph.Axis.Zoom",
    'tag' => 'zoom',
    'parentclass' => "org.multigraph.Mugl.Graph.Axis",
    'attributes' => [
        { 'name' => 'allowed',     "type" =>   'boolean'    },
        { 'name' => 'min',         "type" =>   'double',    'nullallowed' => 1     },
        { 'name' => 'max',         "type" =>   'double',    'nullallowed' => 1     },
        { 'name' => 'anchor',      "type" =>   'DataValue', 'nullallowed' => 1     },
        ],
         });

makebean({
    'class' => "org.multigraph.Mugl.Graph.Axis.Pan",
    'tag' => 'pan',
    'parentclass' => "org.multigraph.Mugl.Graph.Axis",
    'attributes' => [
        { 'name' => 'allowed',     "type" =>   'boolean'    },
        { 'name' => 'min',         "type" =>   'double',    'nullallowed' => 1     },
        { 'name' => 'max',         "type" =>   'double',    'nullallowed' => 1     },
        ],
         });

makebean({
    'class' => "org.multigraph.Mugl.Graph.Axis.Grid",
    'tag' => 'grid',
    'parentclass' => "org.multigraph.Mugl.Graph.Axis",
    'attributes' => [
        { 'name' => 'color',       "type" => 'RGBColor' },
        { 'name' => 'visible',     "type" => 'boolean'  }
        ],
         });

makebean({
    'class' => "org.multigraph.Mugl.Graph.Axis.Labels",
    'tag' => 'labels',
    'parentclass' => "org.multigraph.Mugl.Graph.Axis",
    'attributes' => [
        { 'name' => 'fontname',   "type" => 'String'    },
        { 'name' => 'fontsize',   "type" => 'int'       },
        { 'name' => 'fontcolor',  "type" => 'RGBColor'  },
        { 'name' => 'angle',      "type" => 'double'    },
        { 'name' => 'position',   "type" => 'DPoint',   'nullallowed' => 1    },
        { 'name' => 'anchor',     "type" => 'DPoint',   'nullallowed' => 1    },
        { 'name' => 'spacing',    "type" => 'String'    },
        { 'name' => 'start',      "type" => 'DataValue' },
        { 'name' => 'format',     "type" => 'String'    },
        ],
        'subelements' => [
            { 'tag' => 'label',     'type' => "org.multigraph.Mugl.Graph.Axis.Labels.Label",  'name' => 'labels',  'array' => 1 },
        ],
         }
    );

makebean({
    'class' => "org.multigraph.Mugl.Graph.Axis.Labels.Label",
    'tag' => "label",
    'parentclass' => "org.multigraph.Mugl.Graph.Axis.Labels",
    'attributes' => [
        { 'name' => 'fontname',   "type" => 'String',    'nullsetter' => 'setFromParent' },
        { 'name' => 'fontsize',   "type" => 'int',       'nullsetter' => 'setFromParent' },
        { 'name' => 'fontcolor',  "type" => 'RGBColor',  'nullsetter' => 'setFromParent' },
        { 'name' => 'angle',      "type" => 'double',    'nullsetter' => 'setFromParent' },
        { 'name' => 'position',   "type" => 'DPoint',    'nullsetter' => 'setFromParent' },
        { 'name' => 'anchor',     "type" => 'DPoint',    'nullsetter' => 'setFromParent' },
        { 'name' => 'spacing',    "type" => 'String',    'nullsetter' => 'setFromParent' },
        { 'name' => 'start',      "type" => 'DataValue', 'nullsetter' => 'setFromParent' },
        { 'name' => 'format',     "type" => 'String',    'nullsetter' => 'setFromParent' },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Plot",
    'tag'         => "plot",
    'parentclass' => "org.multigraph.Mugl.Graph",
    'subelements' => [
        { 'tag'  => 'legend',         "type" => "org.multigraph.Mugl.Graph.Plot.Legend"                                 },
        { 'tag'  => 'horizontalaxis', "type" => "org.multigraph.Mugl.Graph.Plot.Axis",     'defaultstag' => 'axis',
          'parseargs' => "org.multigraph.Mugl.Graph.Axis.Orientation.Horizontal" },
        { 'tag'  => 'verticalaxis',   "type" => "org.multigraph.Mugl.Graph.Plot.Axis",     'defaultstag' => 'axis',
          'parseargs' => "org.multigraph.Mugl.Graph.Axis.Orientation.Vertical" },
        { 'tag'  => 'renderer',       "type" => "org.multigraph.Mugl.Graph.Plot.Renderer"                               },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Plot.Legend",
    'tag'         => "legend",
    'parentclass' => "org.multigraph.Mugl.Graph.Plot",
    'attributes' => [
        { 'name'  => 'label',          "type" => 'String'    },
        { 'name'  => 'visible',        "type" => 'boolean'    }
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Plot.Axis",
    'tag'         => "axis",
    'parentclass' => "org.multigraph.Mugl.Graph.Plot",
    'preamble'    => <<EOF
    private org.multigraph.mugl.graph.Axis.Orientation orientation;
    public org.multigraph.mugl.graph.Axis.Orientation getOrientation() {
        return orientation;
    }
    public void setOrientation(org.multigraph.mugl.graph.Axis.Orientation orientation) {
        this.orientation = orientation;
    }
EOF
    ,
    'parseargs' => "org.multigraph.Mugl.Graph.Axis.Orientation Orientation",
    'initsteps' => "axis.setOrientation(orientation);",
    'tagexpr'   => "org.multigraph.Mugl.Graph.Axis.Orientationtostring(Orientation)",
    'attributes' => [
        { 'name' => 'ref',           'type' => 'String' },
        ],
    'subelements' => [
        { 'tag' => 'variable',        'type' => "org.multigraph.Mugl.Graph.Plot.Axis.Variable",   'name' => 'variables',   'array' => 1 }
        ],
         });


makebean({
    'class'       => "org.multigraph.Mugl.Graph.Plot.Axis.Variable",
    'tag'         => "variable",
    'parentclass' => "org.multigraph.Mugl.Graph.Plot.Axis",
    'attributes' => [
        { 'name'  => 'ref',          "type" => 'String'    },
        ],
         });


makebean({
    'class'       => "org.multigraph.Mugl.Graph.Plot.Renderer",
    'tag'         => "renderer",
    'parentclass' => "org.multigraph.Mugl.Graph.Plot",
    'attributes' => [
        { 'name'  => 'type',          "type" => 'String'    },
        ],
    'subelements' => [
        { 'tag'  => 'option',        "type" => "org.multigraph.Mugl.Graph.Plot.Renderer.Option",    'name' => 'options',    'array' => 1  },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Plot.Renderer.Option",
    'tag'         => "option",
    'parentclass' => "org.multigraph.Mugl.Graph.Plot.Renderer",
    'attributes' => [
        { 'name'  => 'name',          "type" => 'String'    },
        { 'name'  => 'value',         "type" => 'String'    },
        { 'name'  => 'min',           "type" => 'String',   'nullallowed' => 1     },
        { 'name'  => 'max',           "type" => 'String',   'nullallowed' => 1     }
        ],
         });


makebean({
    'class'       => "org.multigraph.Mugl.Graph.Data",
    'tag'         => "data",
    'parentclass' => "org.multigraph.Mugl.Graph",
    'subelements' => [
        { 'tag'  => 'variables',     "type" => "org.multigraph.Mugl.Graph.Data.Variables"  },
        { 'tag'  => 'values',        "type" => "org.multigraph.Mugl.Graph.Data.Values"     },
        { 'tag'  => 'csv',           "type" => "org.multigraph.Mugl.Graph.Data.Csv"        },
        { 'tag'  => 'service',       "type" => "org.multigraph.Mugl.Graph.Data.Service"    }
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Data.Variables",
    'tag'         => "variables",
    'parentclass' => "org.multigraph.Mugl.Graph.Data",
    'attributes' => [
        { 'name'  => 'missingvalue',  "type" => 'String',   'nullallowed' => 1  },
        { 'name'  => 'missingop',     "type" => 'String',   'nullallowed' => 1  },
        ],
    'subelements' => [
        { 'tag'  => 'variable',      "type" => "org.multigraph.Mugl.Graph.Data.Variables.Variable",   'name' => 'variables', 'array' => 1  },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Data.Variables.Variable",
    'tag'         => "variable",
    'parentclass' => "org.multigraph.Mugl.Graph.Data.Variables",
    'attributes' => [
        { 'name'  => 'id',            "type" => 'String'                                                      },
        { 'name'  => 'column',        "type" => 'int'                                                         },
        { 'name'  => 'type',          "type" => 'DataValue.Type'                                              },
        { 'name'  => 'missingvalue',  "type" => 'String',          'nullallowed' => 1, 'nullsetter' => 'setFromParent'            },
        { 'name'  => 'missingop',     "type" => 'String',          'nullallowed' => 1, 'nullsetter' => 'setFromParent'            },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Data.Values",
    'tag'         => "values",
    'parentclass' => "org.multigraph.Mugl.Graph.Data",
    'textname'    => 'text'
         });


makebean({
    'class'       => "org.multigraph.Mugl.Graph.Data.Csv",
    'tag'         => "csv",
    'parentclass' => "org.multigraph.Mugl.Graph.Data",
    'attributes' => [
        { 'name'  => 'location',            "type" => 'String'  },
        ],
         });

makebean({
    'class'       => "org.multigraph.Mugl.Graph.Data.Service",
    'tag'         => "service",
    'parentclass' => "org.multigraph.Mugl.Graph.Data",
    'attributes' => [
        { 'name'  => 'location',            "type" => 'String'  },
        ],
         });

foreach $class (@$classes) {
    my $javafile = sprintf("%s.java", $class->{'class'});
    open(OUT, ">$javafile");
    print OUT <<EOF
package org.multigraph;

import java.util.List;
import java.util.ArrayList;
import org.jdom.DataConversionException;
import org.jdom.Element;
import org.jdom.Attribute;
import org.jdom.xpath.XPath;

import org.multigraph.MuglBean;
import org.multigraph.DataValue;
import org.multigraph.DoubleDataValue;
import org.multigraph.DPoint;
import org.multigraph.RGBColor;
EOF
    ;
    print OUT makejava($class);
    close(OUT);
    printf("wrote %s\n", $javafile);
}


sub setFromParent {
    my $inst = shift;
    my $name = shift;
    my $Name = ucfirst($name);
    return qq|$inst.set${Name}(parent.get${Name}(),true);|;
}

sub dumpclasses {
    my $classes = shift;
    my $level = shift;
    if (!$level) {
        printf("classes = [\n");
    }
    foreach $c (@$classes) {
        printf("%s%s\n", " "x$level, $c->{'class'});
        dumpclasses($c->{'children'}, $level+2);
    }
    if (!$level) {
        printf("]\n");
    }
}

sub findnode {
    my $classes   = shift;
    my $classname = shift;
    foreach $class (@$classes) {
        if ($class->{'class'} eq $classname) {
            return $class;
        } else {
            $node = findnode($class->{'children'}, $classname);
            if ($node) {
                return $node;
            }
        }
    }
    return 0;
}

sub makebean {
    my $contents = shift;
    my $class        = $contents->{'class'};
    my $parentclass  = $contents->{'parentclass'};
    if (!$parentclass) {
        push(@$classes, { 'class' => $class, 'contents' => $contents, 'children' => [] });
    } else {
        $parent = findnode($classes,$parentclass);
        if ($parent) {
            push(@{$parent->{'children'}}, { 'class' => $class, 'contents' => $contents, 'children' => [] });
        } else {
            die sprintf("parent %s of class %s is not known at this point; move definition of %s above that of %s\n",
                        $parentclass, $class, $parentclass, $class);
        }
    }
}

sub makejava {
    my $classobj = shift;

    my $contents = $classobj->{'contents'};
    my $children = $classobj->{'children'};

    my @childjavas = ();
    if ($children) {
        foreach $child (@$children) {
            push(@childjavas, makejava($child));
        }
    }
    my $childjavas = join("\n", @childjavas);

    my $class        = $contents->{'class'};
    my $tag          = $contents->{'tag'};
    my $parentclass  = $contents->{'parentclass'};
    my $attrs        = $contents->{'attributes'}  ? $contents->{'attributes'}  : [];
    my $subels       = $contents->{'subelements'} ? $contents->{'subelements'} : [];
    my $preamble     = $contents->{'preamble'};
    my $textname     = $contents->{'textname'};

    my $textnameCap = $textname ? ucfirst($textname) : undef;

    my $package = $class;
    $package =~ s|\.[^\.]+$||;

    my $dir = $package;
    $dir =~ s|\.|/|g;

    my $className  = $class;
    $className =~ s|^.*\.([^\.]+)|$1|;

    my $instName  = lcfirst($tag);
    my $fileName  = "${className}.java";

    ###
    ### Preamble
    ###
#    system("mkdir -p src/$dir");
    $output = <<EOF
public class ${className} extends MuglBean {
$childjavas
EOF
    ;
    if ($parentclass) {
        $output .= <<EOF
    private $parentclass parent;
EOF
    ;
    }
        $output .= <<EOF
$preamble
EOF
    ;

    ###
    ### declarations
    ###
    if ($textname) {
        $output .= <<EOF
    private String $textname;
EOF
    ;
    }
    foreach $attr (@$attrs) {
        $attrName = $attr->{name};
        $attrType = $attr->{type};
        $output .= <<EOF
    private $attrType $attrName;
    private boolean ${attrName}IsSet     = false;
    private boolean ${attrName}IsDefault = false;
EOF
    ;
    }
    foreach $subel (@$subels) {
        $subelTag  = $subel->{tag};
        $subelType = $subel->{type};
        $subelName = $subel->{name} ? $subel->{name} : $subel->{tag};
        if ($subel->{array}) {
        $output .= <<EOF
    private ArrayList<$subelType> $subelName = new ArrayList<$subelType>();
EOF
    ;
        } else {
        $output .= <<EOF
    private $subelType $subelName;
    private boolean ${subelName}IsDefault = false;
EOF
    ;
        }
    }

    ###
    ### getters & setters
    ###
    if ($parentclass) {
        $output .= <<EOF
    public $parentclass getParent() {
        return parent;
    }
    public void setParent($parentclass parent) {
        this.parent = parent;
    }
EOF
    ;
    }
    if ($textname) {
        $output .= <<EOF
    public String get${textnameCap}() {
        return $textname;
    }
    public void set${textnameCap}(String $textname) {
        this.$textname = $textname;
    }
EOF
    ;
    }
    foreach $attr (@$attrs) {
        $attrName    = $attr->{name};
        $attrNameCap = ucfirst($attrName);
        $attrType    = $attr->{type};
        $output .= <<EOF
	public ${attrType} get${attrNameCap}() {
		return ${attrName};
	}
	public void set${attrNameCap}($attrType $attrName) {
		this.${attrName} = ${attrName};
	}
	public void set${attrNameCap}(${attrType} ${attrName}, boolean isDefault) {
        set${attrNameCap}(${attrName});
        this.${attrName}IsSet = true;
        this.${attrName}IsDefault = isDefault;
    }
	public boolean have${attrNameCap}() {
        return ${attrName}IsSet;
    }
EOF
    ;
    }
    foreach $subel (@$subels) {
        $subelTag  = $subel->{tag};
        $subelType = $subel->{type};
        $subelName = $subel->{name} ? $subel->{name} : $subel->{tag};
        $subelNameCap = ucfirst($subelName);
        if ($subel->{array}) {
            $output .= <<EOF
	public ArrayList<${subelType}> get${subelNameCap}() {
		return ${subelName};
	}
EOF
           ;
        } else {
            $output .= <<EOF
	public ${subelType} get${subelNameCap}() {
		return ${subelName};
	}
	public void set${subelNameCap}($subelType $subelName) {
		this.${subelName} = ${subelName};
	}
	public void set${subelNameCap}(${subelType} ${subelName}, boolean isDefault) {
        set${subelNameCap}(${subelName});
        this.${subelName}IsDefault = isDefault;
    }
    public boolean have${subelNameCap}() {
        return this.${subelName} != null;
    }
EOF
           ;
        }
    }


    ###
    ### parse method
    ###
    my $parseargs = $contents->{parseargs} ? sprintf("%s,", $contents->{parseargs}) : "";
    my $initsteps = $contents->{initsteps};
    my $parentarg = $parentclass ? ", ${parentclass} parent" : "";
    $output .= <<EOF
    public static ${className} parse(${parseargs} Element node, Element defaultsNode${parentarg} ) throws Exception {
        final ${className} ${instName} = new ${className}();
        ${initsteps}
EOF
    ;
    if ($parent) {
    $output .= <<EOF
        ${instName}.setParent(parent);
EOF
    ;
    }
    foreach $attr (@$attrs) {
        $attrName    = $attr->{name};
        $attrNameCap = ucfirst($attr->{name});
        $attrType    = $attr->{type};
        $attrValue   = stringToValue($attrType, "value");
        $nullallowed = $attr->{nullallowed} ? " false," : "";
        $nullsetter  = ($attr->{nullsetter}
                        ? sprintf(qq|if (!${instName}.have${attrNameCap}()) { %s }|,
                                  $attr->{nullsetter}(${instName},${attrName}))
                        : "");
        $output .= <<EOF
        setProperty("${attrName}", node, defaultsNode,$nullallowed
                    new PropertySetter() { public void set(String value, boolean isDefault) {
                        ${instName}.set${attrNameCap}( ${attrValue}, isDefault );
                    }});
        $nullsetter
EOF
    ;
    }
    foreach $subel (@$subels) {
        $subelTag          = $subel->{tag};
        $subelDefaultsTag  = $subel->{defaultstag} ? $subel->{defaultstag} : $subel->{tag};
        $subelType         = $subel->{type};
        $subelName         = $subel->{name} ? $subel->{name} : $subel->{tag};
        $singleSubelName   = $subel->{array} ? lcfirst($subelTag) : $subelName;
        $subelNameCap      = ucfirst($subelName);
        $defaultMods       = $subel->{defaultmods} ? $subel->{defaultmods}($singleSubelName, $instName) : "";
        $parseargs         = $subel->{parseargs} ? $subel->{parseargs}."," : "";
        if ($subel->{array}) {
            $output .= <<EOF
        {
            List<Element> elements = (List<Element>)(XPath.selectNodes(node, "${subelTag}"));
            Element defaultsElement = (Element)XPath.selectSingleNode(defaultsNode, "${subelDefaultsTag}");
            for (Element element : elements) {
                if (element != null) {
                    ${instName}.get${subelNameCap}().add( ${subelType}.parse($parseargs element, defaultsElement, ${instName}) );
                } else {
                	${subelType} ${singleSubelName} = ${subelType}.parse($parseargs null, defaultsElement, ${instName});
                    $defaultMods
                    ${instName}.get${subelNameCap}().add( ${singleSubelName} );
                }
            }
        }
EOF
            ;
        } else {
            $output .= <<EOF
        {
            Element element = (Element)XPath.selectSingleNode(node, "${subelTag}");
            Element defaultsElement = (Element)XPath.selectSingleNode(defaultsNode, "${subelDefaultsTag}");
            if (element != null) {
                ${instName}.set${subelNameCap}( ${subelType}.parse($parseargs element, defaultsElement, ${instName}), false );
            } else if (defaultsElement != null) {
            	${subelType} ${singleSubelName} = ${subelType}.parse($parseargs null, defaultsElement, ${instName});
                $defaultMods
                ${instName}.set${subelNameCap}( ${singleSubelName}, true );
            }
        }
EOF
            ;
        }
    }

    if ($textname) {
    $output .= <<EOF
        ${instName}.set${textnameCap}( node == null ? null : node.getText() );
EOF
    ;
    }

    $output .= <<EOF
        return ${instName};
    }
EOF
    ;


    ###
    ### build method
    ###
    my $tagexpr = $contents->{tagexpr} ? $contents->{tagexpr} : qq/"${instName}"/;
    $output .= <<EOF
    public Element build(boolean includeAll) throws Exception {
    	Element element = new Element(${tagexpr});
EOF
    ;
    foreach $attr (@$attrs) {
        $attrName    = $attr->{name};
        $attrNameCap = ucfirst($attr->{name});
        $attrType    = $attr->{type};
        $attrString  = valueToString($attrType, $attrName);
        $output .= <<EOF
        if (${attrName}IsSet && (includeAll || !${attrName}IsDefault)) { element.setAttribute("${attrName}",  ${attrString} ); }
EOF
    ;
    }

    foreach $subel (@$subels) {
        $subelTag  = $subel->{tag};
        $subelType = $subel->{type};
        $subelName = $subel->{name} ? $subel->{name} : $subel->{tag};
        $subelNameCap = ucfirst($subelName);
        $singleSubelName = $subel->{array} ? lcfirst($subelTag) : $subelName;
        if ($subel->{array}) {
        $output .= <<EOF
        for ($subelType $singleSubelName : $subelName) {
            element.addContent( ${singleSubelName}.build(includeAll)  );
        }
EOF
    ;
        } else {
        $output .= <<EOF
        if (have${subelNameCap}() && (includeAll || !${subelName}IsDefault)) { element.addContent( ${subelName}.build(includeAll)  ); }
EOF
    ;
        }
    }

    if ($textname) {
        $output .= <<EOF
        element.setText( ${textname} );
EOF
    ;
    }

    $output .= <<EOF
        return element;
    }
EOF
    ;

    $output .= <<EOF
}
EOF
    ;
    return $output;

}


sub stringToValue {
    my $type = shift;
    my $value = shift;

    if ($type eq "boolean") {
        return qq/($value.equals("true") || $value.equals("yes"))/;
    } elsif ($type eq "int") {
        return qq/Integer.parseInt($value)/;
    } elsif ($type eq "double") {
        return qq/Double.parseDouble($value)/;
    } elsif ($type eq "String") {
        return $value;
    } elsif ($type eq "DPoint") {
        return qq/new DPoint(${value})/;
    } elsif ($type eq "RGBColor") {
        return qq/new RGBColor(${value})/;
    } elsif ($type eq "DataValue") {
        return qq/new DoubleDataValue(${value})/;
    } elsif ($type eq "DataValue.Type") {
        return qq/DataValue.StringToType(${value})/;
    }
}

sub valueToString {
    my $type = shift;
    my $value = shift;

    if ($type eq "boolean") {
        return qq/Boolean.toString($value)/;
    } elsif ($type eq "int") {
        return qq/Integer.toString($value)/;
    } elsif ($type eq "double") {
        return qq/Double.toString($value)/;
    } elsif ($type eq "String") {
        return $value;
    } elsif ($type eq "DPoint") {
        return qq/${value}.toString()/;
    } elsif ($type eq "RGBColor") {
        return qq/${value}.toString()/;
    } elsif ($type eq "DataValue") {
        return qq/${value}.getStringValue()/;
    } elsif ($type eq "DataValue.Type") {
        return qq/DataValue.TypeToString(${value})/;
    }
}
