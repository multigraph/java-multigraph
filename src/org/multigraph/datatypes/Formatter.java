package org.multigraph.datatypes;


import org.multigraph.DataTypeException;
import org.multigraph.datatypes.number.NumberFormatter;
import org.multigraph.datatypes.datetime.DatetimeFormatter;

/**
 * The Formatter class has a single method called format() which
 * converts DataValues to strings, using the format specification
 * given in a format string.
 *
 * This is an abstract superclass that has concrete subclasses for
 * each specific DataType.  To create an instance of a Formatter
 * subclass, use this class's static create() method, which is
 * a factory method that returns an instance of whatever subclass
 * is appropriate for a specific DataType.
 *
 * @see org.multigraph.datatypes.number.NumberFormatter
 * @see org.multigraph.datatypes.datetime.DatetimeFormatter
 */
public abstract class Formatter {

    /**
     * Return the string that results from formatting a specific DataValue using
     * this Formatter's format string. 
     *
     * @param value  The DataValue to be converted.
     *
     * @return A String that is the result of the conversion.
     */
    abstract public String format(DataValue value);


    /**
     * Return the maximum string length of strings (typically) returned
     * by this Formatter.  This may be an estimate and might not include
     * lengths generated by unusually large values.
     *
     * @return The maximum string length.
     */
	abstract public int getMaxLength();

    /**
     * Creates a formatter instance.
     *
     * @param type         The DataType of the DataValues to be converted by this formatter.
     *                     This determines the specific subclass returned.
     * @param formatString A string that specifies the detail of how values should
     *                     be converted.  The specific codes allowed in this format string
     *                     depend on the DataType; see the documentation for the specific
     *                     Formatter subclasses for details.
     * @return An instance of a Formatter subclass
     * @throws DataTypeException If a Formatter subclass is not known for the given DataType
     */
    public static Formatter create(DataType type, String formatString) throws DataTypeException {
        switch (type) {
        case NUMBER:
            return new NumberFormatter(formatString);
        case DATETIME:
        	return new DatetimeFormatter(formatString);
        default:
            throw new DataTypeException(String.format("Formatter.create: unknown DataType ('%s') when constructing Formatter with format '%s'",
                                                      type.toString(), formatString));
        }
    }


}
